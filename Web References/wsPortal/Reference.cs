//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SugarSystem.Client.wsPortal {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OCSBSoap", Namespace="http://tempuri.org/")]
    public partial class OCSB : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback putUpdateDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback putUpdateMasterDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback putNewVehicleOperationCompleted;
        
        private System.Threading.SendOrPostCallback putNewContractOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OCSB() {
            this.Url = global::SugarSystem.Client.Properties.Settings.Default.Client_wsPortal_OCSB;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event putUpdateDataCompletedEventHandler putUpdateDataCompleted;
        
        /// <remarks/>
        public event putUpdateMasterDataCompletedEventHandler putUpdateMasterDataCompleted;
        
        /// <remarks/>
        public event putNewVehicleCompletedEventHandler putNewVehicleCompleted;
        
        /// <remarks/>
        public event putNewContractCompletedEventHandler putNewContractCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/putUpdateData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string putUpdateData(string user, string pass, string ReferenceNumber, string NewStatus, string Note, DeptFile[] deptfile, int version) {
            object[] results = this.Invoke("putUpdateData", new object[] {
                        user,
                        pass,
                        ReferenceNumber,
                        NewStatus,
                        Note,
                        deptfile,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void putUpdateDataAsync(string user, string pass, string ReferenceNumber, string NewStatus, string Note, DeptFile[] deptfile, int version) {
            this.putUpdateDataAsync(user, pass, ReferenceNumber, NewStatus, Note, deptfile, version, null);
        }
        
        /// <remarks/>
        public void putUpdateDataAsync(string user, string pass, string ReferenceNumber, string NewStatus, string Note, DeptFile[] deptfile, int version, object userState) {
            if ((this.putUpdateDataOperationCompleted == null)) {
                this.putUpdateDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnputUpdateDataOperationCompleted);
            }
            this.InvokeAsync("putUpdateData", new object[] {
                        user,
                        pass,
                        ReferenceNumber,
                        NewStatus,
                        Note,
                        deptfile,
                        version}, this.putUpdateDataOperationCompleted, userState);
        }
        
        private void OnputUpdateDataOperationCompleted(object arg) {
            if ((this.putUpdateDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.putUpdateDataCompleted(this, new putUpdateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/putUpdateMasterData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string putUpdateMasterData(string user, string pass, string mastername, string datatable_xml, int version) {
            object[] results = this.Invoke("putUpdateMasterData", new object[] {
                        user,
                        pass,
                        mastername,
                        datatable_xml,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void putUpdateMasterDataAsync(string user, string pass, string mastername, string datatable_xml, int version) {
            this.putUpdateMasterDataAsync(user, pass, mastername, datatable_xml, version, null);
        }
        
        /// <remarks/>
        public void putUpdateMasterDataAsync(string user, string pass, string mastername, string datatable_xml, int version, object userState) {
            if ((this.putUpdateMasterDataOperationCompleted == null)) {
                this.putUpdateMasterDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnputUpdateMasterDataOperationCompleted);
            }
            this.InvokeAsync("putUpdateMasterData", new object[] {
                        user,
                        pass,
                        mastername,
                        datatable_xml,
                        version}, this.putUpdateMasterDataOperationCompleted, userState);
        }
        
        private void OnputUpdateMasterDataOperationCompleted(object arg) {
            if ((this.putUpdateMasterDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.putUpdateMasterDataCompleted(this, new putUpdateMasterDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/putNewVehicle", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string putNewVehicle(string user, string pass, string id, string name, int version) {
            object[] results = this.Invoke("putNewVehicle", new object[] {
                        user,
                        pass,
                        id,
                        name,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void putNewVehicleAsync(string user, string pass, string id, string name, int version) {
            this.putNewVehicleAsync(user, pass, id, name, version, null);
        }
        
        /// <remarks/>
        public void putNewVehicleAsync(string user, string pass, string id, string name, int version, object userState) {
            if ((this.putNewVehicleOperationCompleted == null)) {
                this.putNewVehicleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnputNewVehicleOperationCompleted);
            }
            this.InvokeAsync("putNewVehicle", new object[] {
                        user,
                        pass,
                        id,
                        name,
                        version}, this.putNewVehicleOperationCompleted, userState);
        }
        
        private void OnputNewVehicleOperationCompleted(object arg) {
            if ((this.putNewVehicleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.putNewVehicleCompleted(this, new putNewVehicleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/putNewContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string putNewContract(
                    string user, 
                    string pass, 
                    string CompanyNo, 
                    string CompanyTaxNo, 
                    string ContactNo, 
                    string ContactDate, 
                    string BuyerNo, 
                    string RecieverNo, 
                    string CountryDestinationNo, 
                    string SugarTypeNo, 
                    string PackageTypeNo, 
                    int QuotaTypeNo, 
                    string QuotaYearNo, 
                    decimal ContractQuantity, 
                    decimal ValuePerUnit, 
                    int CurrencyNo, 
                    string ShipmentDateStart, 
                    string ShipmentDateEnd, 
                    int version) {
            object[] results = this.Invoke("putNewContract", new object[] {
                        user,
                        pass,
                        CompanyNo,
                        CompanyTaxNo,
                        ContactNo,
                        ContactDate,
                        BuyerNo,
                        RecieverNo,
                        CountryDestinationNo,
                        SugarTypeNo,
                        PackageTypeNo,
                        QuotaTypeNo,
                        QuotaYearNo,
                        ContractQuantity,
                        ValuePerUnit,
                        CurrencyNo,
                        ShipmentDateStart,
                        ShipmentDateEnd,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void putNewContractAsync(
                    string user, 
                    string pass, 
                    string CompanyNo, 
                    string CompanyTaxNo, 
                    string ContactNo, 
                    string ContactDate, 
                    string BuyerNo, 
                    string RecieverNo, 
                    string CountryDestinationNo, 
                    string SugarTypeNo, 
                    string PackageTypeNo, 
                    int QuotaTypeNo, 
                    string QuotaYearNo, 
                    decimal ContractQuantity, 
                    decimal ValuePerUnit, 
                    int CurrencyNo, 
                    string ShipmentDateStart, 
                    string ShipmentDateEnd, 
                    int version) {
            this.putNewContractAsync(user, pass, CompanyNo, CompanyTaxNo, ContactNo, ContactDate, BuyerNo, RecieverNo, CountryDestinationNo, SugarTypeNo, PackageTypeNo, QuotaTypeNo, QuotaYearNo, ContractQuantity, ValuePerUnit, CurrencyNo, ShipmentDateStart, ShipmentDateEnd, version, null);
        }
        
        /// <remarks/>
        public void putNewContractAsync(
                    string user, 
                    string pass, 
                    string CompanyNo, 
                    string CompanyTaxNo, 
                    string ContactNo, 
                    string ContactDate, 
                    string BuyerNo, 
                    string RecieverNo, 
                    string CountryDestinationNo, 
                    string SugarTypeNo, 
                    string PackageTypeNo, 
                    int QuotaTypeNo, 
                    string QuotaYearNo, 
                    decimal ContractQuantity, 
                    decimal ValuePerUnit, 
                    int CurrencyNo, 
                    string ShipmentDateStart, 
                    string ShipmentDateEnd, 
                    int version, 
                    object userState) {
            if ((this.putNewContractOperationCompleted == null)) {
                this.putNewContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnputNewContractOperationCompleted);
            }
            this.InvokeAsync("putNewContract", new object[] {
                        user,
                        pass,
                        CompanyNo,
                        CompanyTaxNo,
                        ContactNo,
                        ContactDate,
                        BuyerNo,
                        RecieverNo,
                        CountryDestinationNo,
                        SugarTypeNo,
                        PackageTypeNo,
                        QuotaTypeNo,
                        QuotaYearNo,
                        ContractQuantity,
                        ValuePerUnit,
                        CurrencyNo,
                        ShipmentDateStart,
                        ShipmentDateEnd,
                        version}, this.putNewContractOperationCompleted, userState);
        }
        
        private void OnputNewContractOperationCompleted(object arg) {
            if ((this.putNewContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.putNewContractCompleted(this, new putNewContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DeptFile {
        
        private string base64ValueField;
        
        private string docTypeCodeField;
        
        private string docDetailTextField;
        
        /// <remarks/>
        public string Base64Value {
            get {
                return this.base64ValueField;
            }
            set {
                this.base64ValueField = value;
            }
        }
        
        /// <remarks/>
        public string DocTypeCode {
            get {
                return this.docTypeCodeField;
            }
            set {
                this.docTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        public string DocDetailText {
            get {
                return this.docDetailTextField;
            }
            set {
                this.docDetailTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void putUpdateDataCompletedEventHandler(object sender, putUpdateDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class putUpdateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal putUpdateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void putUpdateMasterDataCompletedEventHandler(object sender, putUpdateMasterDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class putUpdateMasterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal putUpdateMasterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void putNewVehicleCompletedEventHandler(object sender, putNewVehicleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class putNewVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal putNewVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void putNewContractCompletedEventHandler(object sender, putNewContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class putNewContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal putNewContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591